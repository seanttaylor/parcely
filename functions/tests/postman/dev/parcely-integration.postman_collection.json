{
	"info": {
		"_postman_id": "a8b41d13-db9a-4bcd-b1ba-9cbd6cff680d",
		"name": "parcely-integration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "crate-service",
			"item": [
				{
					"name": "crate-access",
					"item": [
						{
							"name": "user-access",
							"item": [
								{
									"name": "getUserShipmentHistory",
									"item": [
										{
											"name": "getUserShipmentHistory.getUserAccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Should set access token and current user id in environment\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
															"    pm.environment.set(\"currentUserId\", responseData.userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"emailAddress\": \"{{thorEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/users/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "getUserShipmentHistory.getUserShipmentHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"pm.test(\"Should return object with entries, count and error properties\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
															"    pm.expect(Object.keys(jsonData).includes(\"entries\")).to.eql(true);",
															"    pm.expect(Object.keys(jsonData).includes(\"count\")).to.eql(true);",
															"    pm.expect(Object.keys(jsonData).includes(\"error\")).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{currentUserAccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v1/users/:id/shipments",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														":id",
														"shipments"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{currentUserId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Platform users should be able to get a list of shipments associated with their account"
								},
								{
									"name": "filterShipmentHistoryByStatus",
									"item": [
										{
											"name": "filterShipmentHistoryByStatus.getUserAccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Should set access token and current user id in environment\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
															"    pm.environment.set(\"currentUserId\", responseData.userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"emailAddress\": \"{{thorEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/users/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "filterShipmentHistoryByStatus.filterShipmentHistory",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Should return object with entries, count and error properties\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(Object.keys(jsonData).includes(\"entries\")).to.eql(true);",
															"    pm.expect(Object.keys(jsonData).includes(\"count\")).to.eql(true);",
															"    pm.expect(Object.keys(jsonData).includes(\"error\")).to.eql(true);",
															"});",
															"",
															"pm.test(\"Should return an array of shipments with status 'inProgress'\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
															"    pm.expect(typeof(jsonData.count) === \"number\").to.eql(true);",
															"    pm.expect(jsonData.error === null).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{currentUserAccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v1/users/:id/shipments?status=inProgress",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														":id",
														"shipments"
													],
													"query": [
														{
															"key": "status",
															"value": "inProgress"
														}
													],
													"variable": [
														{
															"key": "id",
															"value": "{{currentUserId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Platform users should be able to get a filtered list of shipments associated with their user account based on shipment status"
								},
								{
									"name": "getCratesByRecipient",
									"item": [
										{
											"name": "getCratesByRecipient.getUserAccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Should set access token and current user id in environment\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
															"    pm.environment.set(\"currentUserId\", responseData.userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"emailAddress\": \"{{thorEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/users/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "getCratesByRecipient.getCratesByRecipient",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Should return object with entries, count and error properties\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(Object.keys(jsonData).includes(\"entries\")).to.eql(true);",
															"    pm.expect(Object.keys(jsonData).includes(\"count\")).to.eql(true);",
															"    pm.expect(Object.keys(jsonData).includes(\"error\")).to.eql(true);",
															"});",
															"",
															"pm.test(\"Should return an array of shipments associated with the current user\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
															"    pm.expect(jsonData[\"entries\"][0][\"data\"][\"recipientId\"] === pm.environment.get(\"currentUserId\")).to.eql(true);",
															"    pm.expect(Object.keys(jsonData[\"entries\"][0][\"data\"]).includes(\"telemetry\")).to.eql(true);",
															"    pm.expect(typeof(jsonData.count) === \"number\").to.eql(true);",
															"    pm.expect(jsonData.error === null).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{currentUserAccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v1/users/:id/crates",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														":id",
														"crates"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{currentUserId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Platform users should be able to find geolocation data for all crates associated with their own account"
								},
								{
									"name": "getCrateShipmentById",
									"item": [
										{
											"name": "getCrateShipmentById.getUserAccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Should set access token and current user id in environment\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
															"    pm.environment.set(\"currentUserId\", responseData.userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"emailAddress\": \"{{thorEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/users/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "getCrateShipmentById.getAdminAccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Should set access token and current admin id in environment\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
															"    pm.environment.set(\"currentAdminId\", responseData.userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/users/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "getCrateShipmentById.createCrate",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Should set currentCrateId in environment\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{currentAdminAccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{$randomUUID}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/crates",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"crates"
													]
												}
											},
											"response": []
										},
										{
											"name": "getCrateShipmentById.setCrateRecipient",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{currentAdminAccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"recipientId\": \"{{currentUserId}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/crates/:id/recipient",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"crates",
														":id",
														"recipient"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{currentCrateId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getCrateShipmentById.startCrateShipment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Should set shipmentId in environment\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.environment.set(\"currentShipmentId\", jsonData[\"entries\"][0][\"data\"][\"shipmentId\"]);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{currentAdminAccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"originAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"apartmentNumber\": \"7\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"NY\",\n        \"zip\": \"10001\"\n    },\n    \"destinationAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"MA\",\n        \"zip\": \"00001\"\n    },\n    \"trackingNumber\": \"{{$randomUUID}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/crates/:id/shipments",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"crates",
														":id",
														"shipments"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{currentCrateId}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "getCrateShipmentById.adminPushRealtimeUpdates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{currentAdminAccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"crateId\": \"{{currentCrateId}}\",\n    \"telemetry\": {\n        \"temp\": {\n            \"degreesFahrenheit\": \"{{$randomInt}}\"\n        },\n        \"location\": {\n            \"coords\": {\n                \"lat\": {{$randomLatitude}},\n                \"lng\": {{$randomLongitude}}\n            },\n            \"zip\": \"00001\"\n        },\n        \"sensors\": {\n            \"moisture\": {\n                \"thresholdExceeded\": false\n            },\n            \"thermometer\": {\n                \"thresholdExceeded\": false\n            },\n            \"photometer\": {\n                \"thresholdExceeded\": false\n            }\n        }\n    }\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/crates/telemetry/rt-updates",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"crates",
														"telemetry",
														"rt-updates"
													]
												}
											},
											"response": []
										},
										{
											"name": "getCrateShipmentById.getCrateShipmentById",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Should return an array of shipments of length 1\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
															"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
															"    pm.expect(jsonData.count === 1).to.eql(true);",
															"    pm.expect(jsonData.error === null).to.eql(true);",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{currentUserAccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v1/crates/:id/shipments/:shipmentId",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"crates",
														":id",
														"shipments",
														":shipmentId"
													],
													"variable": [
														{
															"key": "id",
															"value": "{{currentCrateId}}"
														},
														{
															"key": "shipmentId",
															"value": "{{currentShipmentId}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"description": "Platform users should be able to get a summarized list of real-time telemetry data points for a specified crate shipment"
								}
							]
						},
						{
							"name": "admin-access",
							"item": [
								{
									"name": "adminGetAllCrates",
									"item": [
										{
											"name": "adminGetAllCrates.getAdminAccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Should set access token and current admin id in environment\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
															"    pm.environment.set(\"currentAdminId\", responseData.userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/users/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "adminGetAllCrates.getAllCrates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Should return a list of crates\", function () {",
															"    const jsonData = pm.response.json();",
															"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
															"    pm.expect(typeof(jsonData.count) === \"number\").to.eql(true);",
															"    pm.expect(Object.keys(jsonData.entries[0]).includes(\"data\")).to.eql(true);",
															"    pm.expect(jsonData.error === null).to.eql(true);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{currentAdminAccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v1/crates",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"crates"
													]
												}
											},
											"response": []
										}
									],
									"description": "Admins should be able to access ALL crates"
								},
								{
									"name": "nonAdminAllCrates",
									"item": [
										{
											"name": "nonAdminAllCrates.getUserAccessToken",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(201);",
															"});",
															"",
															"pm.test(\"Should set access token and current user id in environment\", function () {",
															"    const responseData = pm.response.json();",
															"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
															"    pm.environment.set(\"currentUserId\", responseData.userId);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"emailAddress\": \"{{thorEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{url}}/api/v1/users/token",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"users",
														"token"
													]
												}
											},
											"response": []
										},
										{
											"name": "nonAdminAllCrates.getAllCrates",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 401\", function () {",
															"    pm.response.to.have.status(401);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{currentUserAccessToken}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{url}}/api/v1/crates",
													"host": [
														"{{url}}"
													],
													"path": [
														"api",
														"v1",
														"crates"
													]
												}
											},
											"response": []
										}
									],
									"description": "Platform users should NOT be able to access ALL crates"
								}
							]
						}
					]
				},
				{
					"name": "crate-management",
					"item": [
						{
							"name": "adminCreateCrate",
							"item": [
								{
									"name": "adminCreateCrate.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCreateCrate.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentCrateId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
													"",
													"});",
													"",
													"pm.test(\"Should return an array of crates of length 1\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"     pm.expect(jsonData.entries[0][\"data\"][\"size\"][0] === \"L\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{$randomUUID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								}
							],
							"description": "Admins should be able to create new crates"
						},
						{
							"name": "adminSetRecipient",
							"item": [
								{
									"name": "adminSetRecipient.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetRecipient.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentCrateId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
													"",
													"});",
													"",
													"pm.test(\"Should return an array of crates of length 1\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"     pm.expect(jsonData.entries[0][\"data\"][\"size\"][0] === \"L\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{$randomUUID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetRecipient.setCrateRecipient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeRecipientId` variable to the current environment",
													"const fakeRecipientId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeRecipientId\", fakeRecipientId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"recipientId\": \"{{fakeRecipientId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/recipient",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"recipient"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetRecipient.getCrateById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return a crate with a `recipientId` matching the recipient in the setCrateRecipient request\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"entries\"][0][\"data\"][\"recipientId\"] === pm.environment.get(\"fakeRecipientId\")).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "adminDeleteCrate",
							"item": [
								{
									"name": "adminDeleteCrate.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminDeleteCrate.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentCrateId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
													"",
													"});",
													"",
													"pm.test(\"Should return an array of crates of length 1\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"     pm.expect(jsonData.entries[0][\"data\"][\"size\"][0] === \"L\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{$randomUUID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminDeleteCrate.deleteCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminDeleteCrate.getCrateById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {",
													"    pm.response.to.have.status(404);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Admins should be able to delete an existing crate"
						},
						{
							"name": "adminSetCratePendingReturn",
							"item": [
								{
									"name": "adminSetCrateStatus.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetCrateStatus.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentCrateId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
													"",
													"});",
													"",
													"pm.test(\"Should return an array of crates of length 1\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"     pm.expect(jsonData.entries[0][\"data\"][\"size\"][0] === \"L\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeMerchantId` variable to the current environment",
													"const fakeMerchantId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeMerchantId\", fakeMerchantId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{fakeMerchantId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetCrateStatus.setCrateRecipient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeRecipientId` variable to the current environment",
													"const fakeRecipientId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeRecipientId\", fakeRecipientId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"recipientId\": \"{{fakeRecipientId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/recipient",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"recipient"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetCrateStatus.startCrateShipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set shipmentId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentShipmentId\", jsonData[\"entries\"][0][\"data\"][\"shipmentId\"]);",
													"});",
													"",
													"pm.test(\"Should update all shipment metadata\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.entries[0][\"data\"][\"id\"] === pm.environment.get(\"currentCrateId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"shipmentId\"] === pm.environment.get(\"currentShipmentId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"merchantId\"] === pm.environment.get(\"fakeMerchantId\")).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"originAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"apartmentNumber\": \"7\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"NY\",\n        \"zip\": \"10001\"\n    },\n    \"destinationAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"MA\",\n        \"zip\": \"00001\"\n    },\n    \"trackingNumber\": \"{{$randomUUID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetCrateStatus.getCrateById[1]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return crate with status equal to 'inTransit'\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"   ",
													"    pm.expect(jsonData.entries[0][\"data\"][\"status\"][0] === \"inTransit\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetCrateStatus.completeShipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments/:shipmentId/status/complete",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments",
												":shipmentId",
												"status",
												"complete"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												},
												{
													"key": "shipmentId",
													"value": "{{currentShipmentId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetCrateStatus.getCrateById[2]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return crate with status equal to 'delivered'\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"    ",
													"    pm.expect(jsonData.entries[0][\"data\"][\"shipmentId\"] === null).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"recipientId\"] === null).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"status\"][0] === \"delivered\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetCrateStatus.getCrateShipmentById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return shipment with status equal to 'complete'\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"   ",
													"    pm.expect(jsonData.entries[0][\"data\"][\"status\"][0] === \"complete\").to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments/:shipmentId",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments",
												":shipmentId"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												},
												{
													"key": "shipmentId",
													"value": "{{currentShipmentId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetCrateStatus.setCrateStatus",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/status/pending_return",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"status",
												"pending_return"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminSetCrateStatus.getCrateById[3]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return crate with status equal to 'pendingReturn'\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"   ",
													"    pm.expect(jsonData.entries[0][\"data\"][\"status\"][0] === \"pendingReturn\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Admins should be able to set a crate's status"
						},
						{
							"name": "nonAdminCreateCrate",
							"item": [
								{
									"name": "nonAdminCreateCrate.getUserAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current user id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{thorEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "nonAdminCreateCrate.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{$randomUUID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform users should NOT be able to create new crates"
						},
						{
							"name": "nonAdminDeleteCrate",
							"item": [
								{
									"name": "nonAdminDeleteCrate.getUserAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current user id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{thorEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "nonAdminDeleteCrate.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "nonAdminDeleteCrate.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{$randomUUID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								},
								{
									"name": "nonAdminDeleteCrate.deleteCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 401\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform users should NOT be able to delete an existing crate"
						}
					]
				},
				{
					"name": "shipment-management",
					"item": [
						{
							"name": "adminStartCrateShipment",
							"item": [
								{
									"name": "adminStartCrateShipment.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminStartCrateShipment.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentCrateId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
													"",
													"});",
													"",
													"pm.test(\"Should return an array of crates of length 1\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"size\"][0] === \"L\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeMerchantId` variable to the current environment",
													"const fakeMerchantId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeMerchantId\", fakeMerchantId);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{fakeMerchantId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminStartCrateShipment.setCrateRecipient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeRecipientId` variable to the current environment",
													"const fakeRecipientId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeRecipientId\", fakeRecipientId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"recipientId\": \"{{fakeRecipientId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/recipient",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"recipient"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminStartCrateShipment.startCrateShipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set shipmentId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentShipmentId\", jsonData[\"entries\"][0][\"data\"][\"shipmentId\"]);",
													"});",
													"",
													"pm.test(\"Should update all shipment metadata\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"    ",
													"    pm.expect(jsonData.entries[0][\"data\"][\"id\"] === pm.environment.get(\"currentCrateId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"shipmentId\"] === pm.environment.get(\"currentShipmentId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"merchantId\"] === pm.environment.get(\"fakeMerchantId\")).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"originAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"apartmentNumber\": \"7\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"NY\",\n        \"zip\": \"10001\"\n    },\n    \"destinationAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"MA\",\n        \"zip\": \"00001\"\n    },\n    \"trackingNumber\": \"{{$randomUUID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminStartCrateShipment.getShipmentsByCrateId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return current shipment metadata\", function () {",
													"     const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"id\"] === pm.environment.get(\"currentShipmentId\")).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminStartCrateShipment.getCrateById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return crate with status equal to 'inTransit'\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"   ",
													"    pm.expect(jsonData.entries[0][\"data\"][\"status\"][0] === \"inTransit\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Admins should be able to start shipment of a specified crate"
						},
						{
							"name": "adminGetShipments",
							"item": [
								{
									"name": "adminGetShipments.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminGetShipments.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentCrateId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
													"",
													"});",
													"",
													"pm.test(\"Should return an array of crates of length 1\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"     pm.expect(jsonData.entries[0][\"data\"][\"size\"][0] === \"L\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeMerchantId` variable to the current environment",
													"const fakeMerchantId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeMerchantId\", fakeMerchantId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{fakeMerchantId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminGetShipments.setCrateRecipient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeRecipientId` variable to the current environment",
													"const fakeRecipientId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeRecipientId\", fakeRecipientId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"recipientId\": \"{{fakeRecipientId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/recipient",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"recipient"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminGetShipments.startCrateShipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set shipmentId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentShipmentId\", jsonData[\"entries\"][0][\"data\"][\"shipmentId\"]);",
													"});",
													"",
													"pm.test(\"Should update all shipment metadata\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.entries[0][\"data\"][\"id\"] === pm.environment.get(\"currentCrateId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"shipmentId\"] === pm.environment.get(\"currentShipmentId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"merchantId\"] === pm.environment.get(\"fakeMerchantId\")).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"originAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"apartmentNumber\": \"7\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"NY\",\n        \"zip\": \"10001\"\n    },\n    \"destinationAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"MA\",\n        \"zip\": \"00001\"\n    },\n    \"trackingNumber\": \"{{$randomUUID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminGetShipments.getShipmentsByCrateId",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return a crate with status 'inProgress'\", function () {",
													"     const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"   ",
													"    pm.expect(jsonData.entries[0][\"id\"] === pm.environment.get(\"currentShipmentId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"status\"][0] === \"inProgress\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminGetShipments.getShipmentById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments/:shipmentId",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments",
												":shipmentId"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												},
												{
													"key": "shipmentId",
													"value": "{{currentShipmentId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Admins should be able to get a list of all shipments for a specified crate"
						},
						{
							"name": "adminCompleteCrateShipment",
							"item": [
								{
									"name": "adminCompleteCrateShipment.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCompleteCrateShipment.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentCrateId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
													"",
													"});",
													"",
													"pm.test(\"Should return an array of crates of length 1\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"     pm.expect(jsonData.entries[0][\"data\"][\"size\"][0] === \"L\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeMerchantId` variable to the current environment",
													"const fakeMerchantId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeMerchantId\", fakeMerchantId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{fakeMerchantId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCompleteCrateShipment.setCrateRecipient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeRecipientId` variable to the current environment",
													"const fakeRecipientId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeRecipientId\", fakeRecipientId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"recipientId\": \"{{fakeRecipientId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/recipient",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"recipient"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCompleteCrateShipment.startCrateShipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set shipmentId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentShipmentId\", jsonData[\"entries\"][0][\"data\"][\"shipmentId\"]);",
													"});",
													"",
													"pm.test(\"Should update all shipment metadata\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.entries[0][\"data\"][\"id\"] === pm.environment.get(\"currentCrateId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"shipmentId\"] === pm.environment.get(\"currentShipmentId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"merchantId\"] === pm.environment.get(\"fakeMerchantId\")).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"originAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"apartmentNumber\": \"7\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"NY\",\n        \"zip\": \"10001\"\n    },\n    \"destinationAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"MA\",\n        \"zip\": \"00001\"\n    },\n    \"trackingNumber\": \"{{$randomUUID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCompleteCrateShipment.getCrateById[1]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return crate with status equal to 'inTransit'\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"   ",
													"    pm.expect(jsonData.entries[0][\"data\"][\"status\"][0] === \"inTransit\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCompleteCrateShipment.completeShipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments/:shipmentId/status/complete",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments",
												":shipmentId",
												"status",
												"complete"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												},
												{
													"key": "shipmentId",
													"value": "{{currentShipmentId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCompleteCrateShipment.getCrateById[2]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return crate with status equal to 'delivered'\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"   ",
													"    pm.expect(jsonData.entries[0][\"data\"][\"status\"][0] === \"delivered\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCompleteCrateShipment.getShipmentById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return shipment with status equal to 'complete'\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"   ",
													"    pm.expect(jsonData.entries[0][\"data\"][\"status\"][0] === \"complete\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments/:shipmentId",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments",
												":shipmentId"
											],
											"query": [
												{
													"key": "includeWaypoints",
													"value": "true",
													"disabled": true
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												},
												{
													"key": "shipmentId",
													"value": "{{currentShipmentId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Admins should be able to complete shipment of a specified crate"
						},
						{
							"name": "ingestRealtimeUpdates",
							"item": [
								{
									"name": "ingestRealtimeUpdates.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "ingestRealtimeUpdates.getUserAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current user id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{thorEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "ingestRealtimeUpdates.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentCrateId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
													"",
													"});",
													"",
													"pm.test(\"Should return an array of crates of length 1\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"     pm.expect(jsonData.entries[0][\"data\"][\"size\"][0] === \"L\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeMerchantId` variable to the current environment",
													"const fakeMerchantId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeMerchantId\", fakeMerchantId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{fakeMerchantId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								},
								{
									"name": "ingestRealtimeUpdates.setCrateRecipient",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `fakeRecipientId` variable to the current environment",
													"const fakeRecipientId = pm.variables.replaceIn(\"{{$randomUUID}}\");",
													"pm.environment.set(\"fakeRecipientId\", fakeRecipientId);",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"recipientId\": \"{{fakeRecipientId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/recipient",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"recipient"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ingestRealtimeUpdates.startCrateShipment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set shipmentId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentShipmentId\", jsonData[\"entries\"][0][\"data\"][\"shipmentId\"]);",
													"});",
													"",
													"pm.test(\"Should update all shipment metadata\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.entries[0][\"data\"][\"id\"] === pm.environment.get(\"currentCrateId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"shipmentId\"] === pm.environment.get(\"currentShipmentId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"merchantId\"] === pm.environment.get(\"fakeMerchantId\")).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"originAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"apartmentNumber\": \"7\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"NY\",\n        \"zip\": \"10001\"\n    },\n    \"destinationAddress\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"MA\",\n        \"zip\": \"00001\"\n    },\n    \"trackingNumber\": \"{{$randomUUID}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "ingestRealtimeUpdates.adminPushRealtimeUpdates",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"crateId\": \"{{currentCrateId}}\",\n    \"telemetry\": {\n        \"temp\": {\n            \"degreesFahrenheit\": \"{{$randomInt}}\"\n        },\n        \"location\": {\n            \"coords\": {\n                \"lat\": {{$randomLatitude}},\n                \"lng\": {{$randomLongitude}}\n            },\n            \"zip\": \"00001\"\n        },\n        \"sensors\": {\n            \"moisture\": {\n                \"thresholdExceeded\": false\n            },\n            \"thermometer\": {\n                \"thresholdExceeded\": false\n            },\n            \"photometer\": {\n                \"thresholdExceeded\": false\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates/telemetry/rt-updates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												"telemetry",
												"rt-updates"
											]
										}
									},
									"response": []
								},
								{
									"name": "ingestRealtimeUpdates.getShipmentById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return shipment with updated waypoints list\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries[0][\"data\"][\"waypoints\"][\"length\"] === 1).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/crates/:id/shipments/:shipmentId?includeWaypoints=true",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates",
												":id",
												"shipments",
												":shipmentId"
											],
											"query": [
												{
													"key": "includeWaypoints",
													"value": "true"
												}
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentCrateId}}"
												},
												{
													"key": "shipmentId",
													"value": "{{currentShipmentId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform should be able to ingest real-time updates from hardware crates"
						}
					]
				}
			]
		},
		{
			"name": "merchant-service",
			"item": [
				{
					"name": "merchant-management",
					"item": [
						{
							"name": "adminCreateMerchant",
							"item": [
								{
									"name": "adminCreateMerchant.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCreateMerchant.createUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentUserId in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});",
													"",
													"pm.test(\"Should set currentUserAccessToken in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCreateMerchant.createMerchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"pm.test(\"Should return a new merchant record\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Object.keys(jsonData.entries[0][\"data\"]).includes(\"id\")).to.eql(true);",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"userId\": \"{{currentUserId}}\",\n    \"address\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"CA\",\n        \"zip\": \"90210\"\n    },\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"plan\": {\n        \"planType\": [\"smallBusiness\"],\n        \"startDate\": \"01/01/2021\",\n        \"expiryDate\": \"01/01/2022\",\n        \"status\": [\n            \"active\"\n        ],\n        \"autoRenew\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/merchants",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants"
											]
										}
									},
									"response": []
								}
							],
							"description": "Admins should be able to create a new merchant"
						},
						{
							"name": "merchantUpdatePlan",
							"item": [
								{
									"name": "merchantUpdatePlan.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantUpdatePlan.createUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentUserId in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});",
													"",
													"pm.test(\"Should set currentUserAccessToken in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantUpdatePlan.createMerchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"pm.test(\"Should return a new merchant record\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Object.keys(jsonData.entries[0][\"data\"]).includes(\"id\")).to.eql(true);",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});",
													"",
													"pm.test(\"Should set currentMerchantId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentMerchantId\", jsonData[\"entries\"][0][\"id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"userId\": \"{{currentUserId}}\",\n    \"address\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"CA\",\n        \"zip\": \"90210\"\n    },\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"plan\": {\n        \"planType\": [\"smallBusiness\"],\n        \"startDate\": \"01/01/2021\",\n        \"expiryDate\": \"01/01/2022\",\n        \"status\": [\n            \"active\"\n        ],\n        \"autoRenew\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/merchants",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants"
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantUpdatePlan.updatePlan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													"pm.test(\"Response time is less than 500ms\", function () {",
													"    pm.expect(pm.response.responseTime).to.be.below(500);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"planType\": [\"enterprise\"],\n    \"startDate\": \"01/01/2021\",\n    \"expiryDate\": \"01/01/2022\",\n    \"status\": [\n        \"active\"\n    ],\n    \"autoRenew\": true\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/merchants/:id/plan",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants",
												":id",
												"plan"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentMerchantId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantUpdatePlan.getMerchantById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return updated merchant plan\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"    pm.expect(jsonData[\"entries\"][0][\"data\"][\"plan\"][\"planType\"][0] === \"enterprise\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/merchants/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentMerchantId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Merchants should be able update their own plan"
						},
						{
							"name": "adminCreateMerchantNonExistingUser",
							"item": [
								{
									"name": "adminCreateMerchantNonExistingUser.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCreateMerchantNonExistingUser.createMerchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Should not be able to create a merchant for a non-existing user\", function() {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.count === 0).to.eql(true);",
													"    pm.expect(jsonData.error !== null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"userId\": \"{{$randomUUID}}\",\n    \"address\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"CA\",\n        \"zip\": \"90210\"\n    },\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"plan\": {\n        \"planType\": [\"smallBusiness\"],\n        \"startDate\": \"01/01/2021\",\n        \"expiryDate\": \"01/01/2022\",\n        \"status\": [\n            \"active\"\n        ],\n        \"autoRenew\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/merchants",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants"
											]
										}
									},
									"response": []
								}
							],
							"description": "Admins should NOT be able to create a new merchant for a userId that does not exist"
						},
						{
							"name": "adminCreateMerchantExistingMerchantAccount",
							"item": [
								{
									"name": "adminCreateMerchantExistingAccount.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminCreateMerchantExistingAccount.createMerchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(\"Should not be able to create a merchant for a user with an existing merchant account\", function() {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.count === 0).to.eql(true);",
													"    pm.expect(jsonData.error !== null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"userId\": \"{{currentUserId}}\",\n    \"address\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"CA\",\n        \"zip\": \"90210\"\n    },\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"plan\": {\n        \"planType\": [\"smallBusiness\"],\n        \"startDate\": \"01/01/2021\",\n        \"expiryDate\": \"01/01/2022\",\n        \"status\": [\n            \"active\"\n        ],\n        \"autoRenew\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/merchants",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants"
											]
										}
									},
									"response": []
								}
							],
							"description": "Admins should NOT be able to create a new merchant for a user that already has a merchant account"
						},
						{
							"name": "merchantCancelOwnPlan",
							"item": [
								{
									"name": "merchantCancelOwnPlan.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantCancelOwnPlan.createUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should set currentUserId in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantCancelOwnPlan.createMerchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"pm.test(\"Should return a new merchant record\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Object.keys(jsonData.entries[0][\"data\"]).includes(\"id\")).to.eql(true);",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});",
													"",
													"pm.test(\"Should set currentMerchantId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentMerchantId\", jsonData[\"entries\"][0][\"id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"userId\": \"{{currentUserId}}\",\n    \"address\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"CA\",\n        \"zip\": \"90210\"\n    },\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"plan\": {\n        \"planType\": [\"smallBusiness\"],\n        \"startDate\": \"01/01/2021\",\n        \"expiryDate\": \"01/01/2022\",\n        \"status\": [\n            \"active\"\n        ],\n        \"autoRenew\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/merchants",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants"
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantCancelOwnPlan.cancelPlan",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/merchants/:id/plan/cancel",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants",
												":id",
												"plan",
												"cancel"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentMerchantId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantCancelOwnPlan.getMerchantById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return a merchant record with plan status of cancelled\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData[\"entries\"][0][\"data\"][\"plan\"][\"status\"][0] === \"cancelled\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/merchants/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentMerchantId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Merchants should be able to cancel their own plan"
						},
						{
							"name": "adminArchiveMerchant",
							"item": [
								{
									"name": "adminArchiveMerchant.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminArchiveMerchant.createUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentUserId in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});",
													"",
													"pm.test(\"Should set currentUserAccessToken in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminArchiveMerchant.createMerchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should return a new merchant record\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Object.keys(jsonData.entries[0][\"data\"]).includes(\"id\")).to.eql(true);",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});",
													"",
													"pm.test(\"Should set currentMerchantId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentMerchantId\", jsonData[\"entries\"][0][\"id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"userId\": \"{{currentUserId}}\",\n    \"address\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"CA\",\n        \"zip\": \"90210\"\n    },\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"plan\": {\n        \"planType\": [\"smallBusiness\"],\n        \"startDate\": \"01/01/2021\",\n        \"expiryDate\": \"01/01/2022\",\n        \"status\": [\n            \"active\"\n        ],\n        \"autoRenew\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/merchants",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminArchiveMerchant.archiveMerchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/merchants/:id/status/archived",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants",
												":id",
												"status",
												"archived"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentMerchantId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminArchiveMerchant.getMerchantById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return a merchant record with status of archived\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData[\"entries\"][0][\"data\"][\"status\"][0] === \"archived\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/merchants/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentMerchantId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Admins should be able to archive a specified merchant"
						},
						{
							"name": "merchantGetCrates",
							"item": [
								{
									"name": "merchantGetCrates.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current admin id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentAdminId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantGetCrates.createUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentUserId in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});",
													"",
													"pm.test(\"Should set currentUserAccessToken in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantGetCrates.createMerchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should return a new merchant record\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(Object.keys(jsonData.entries[0][\"data\"]).includes(\"id\")).to.eql(true);",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});",
													"",
													"pm.test(\"Should set currentMerchantId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentMerchantId\", jsonData[\"entries\"][0][\"id\"]);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{$randomCompanyName}}\",\n    \"userId\": \"{{currentUserId}}\",\n    \"address\": {\n        \"street\": \"{{$randomStreetName}}\",\n        \"city\": \"{{$randomCity}}\",\n        \"state\": \"CA\",\n        \"zip\": \"90210\"\n    },\n    \"emailAddress\": \"{{$randomEmail}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"plan\": {\n        \"planType\": [\"smallBusiness\"],\n        \"startDate\": \"01/01/2021\",\n        \"expiryDate\": \"01/01/2022\",\n        \"status\": [\n            \"active\"\n        ],\n        \"autoRenew\": true\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/merchants",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants"
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantGetCrates.createCrate",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set currentCrateId in environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
													"",
													"});",
													"",
													"pm.test(\"Should return an array of crates of length 1\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
													"     pm.expect(jsonData.entries[0][\"data\"][\"size\"][0] === \"L\").to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{currentMerchantId}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"crates"
											]
										}
									},
									"response": []
								},
								{
									"name": "merchantGetCrates.getCratesByMerchant",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return a a list of crates associated with a merchant\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData[\"entries\"][0][\"data\"][\"merchantId\"] === pm.environment.get(\"currentMerchantId\")).to.eql(true);",
													"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
													"    pm.expect(jsonData.count === 1).to.eql(true);",
													"    pm.expect(jsonData.error === null).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/merchants/:id/crates",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"merchants",
												":id",
												"crates"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentMerchantId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Merchants should be able to get a list of crates associated with their account"
						}
					],
					"description": "Admins should be able to create a new merchant"
				}
			]
		},
		{
			"name": "user-service",
			"item": [
				{
					"name": "user-credentials",
					"item": [
						{
							"name": "getUserAccessToken",
							"item": [
								{
									"name": "getUserAccessToken.getToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should be able to get a userId and access credential when a new User instance is created\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(Object.keys(responseData).includes(\"accessToken\")).to.eql(true);",
													"    pm.expect(Object.keys(responseData).includes(\"userId\")).to.eql(true);",
													"    pm.expect(typeof(responseData.userId) === \"string\").to.eql(true);",
													"    pm.expect(typeof(responseData.accessToken) === \"string\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{tstarkEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "user-auth",
					"item": [
						{
							"name": "userGetOwnUserData",
							"item": [
								{
									"name": "userGetOwnUserData.getUserAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current user id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{tstarkEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "userGetOwnUserData.getUserById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return a user record matching that specified in the URL\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"entries\"][0][\"id\"]).to.eql(pm.environment.get(\"currentUserId\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/users/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentUserId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform users should be able to access their own data"
						},
						{
							"name": "userGetOtherUserData",
							"item": [
								{
									"name": "userGetOtherUserData.getUserAccessToken Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current user id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{tstarkEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "userGetOtherUserData.getUserById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/users/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{thorUserId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform users should NOT be able to access other users' data"
						},
						{
							"name": "userEditOtherUserData",
							"item": [
								{
									"name": "userEditOtherUserData.getUserAccessToken Copy 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token and current user id in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{tstarkEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "userEditOtherUserData.updateName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 403\", function () {",
													"    pm.response.to.have.status(403);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Brand New Name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/:id/name",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":id",
												"name"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{thorUserId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform users should NOT be able to edit other users' account data"
						}
					]
				},
				{
					"name": "admin-auth",
					"item": [
						{
							"name": "adminAccessAnyUserAccount",
							"item": [],
							"description": "Admin users should be able to access ANY user account data"
						},
						{
							"name": "adminEditAnyUserAccount",
							"item": [],
							"description": "Admin users should be able to edit ANY user account data"
						}
					]
				},
				{
					"name": "user-management",
					"item": [
						{
							"name": "userUpdateName",
							"item": [
								{
									"name": "userUpdateName.createUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token in the environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should set currentuserId in the environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `currentUserEmailAddress` variable to the current environment",
													"const currentUserEmailAddress = pm.variables.replaceIn(\"{{$randomEmail}}\");",
													"pm.environment.set(\"currentUserEmailAddress\", currentUserEmailAddress);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{currentUserEmailAddress}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "userUpdateName.updateName",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"firstName\": \"Brand New Name\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/:id/name",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":id",
												"name"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentUserId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform users should be able to edit the name on their account"
						},
						{
							"name": "userUpdatePhoneNumber",
							"item": [
								{
									"name": "userUpdatePhoneNumber.createUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token in the environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should set currentuserId in the environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `currentUserEmailAddress` variable to the current environment",
													"const currentUserEmailAddress = pm.variables.replaceIn(\"{{$randomEmail}}\");",
													"pm.environment.set(\"currentUserEmailAddress\", currentUserEmailAddress);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{currentUserEmailAddress}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "userUpdatePhoneNumber.updatePhone",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/:id/phone",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":id",
												"phone"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentUserId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform users should be able to edit the phone number on their account"
						},
						{
							"name": "userUpdateEmailAddress",
							"item": [
								{
									"name": "userUpdateEmailAddress.createUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token in the environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should set currentuserId in the environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `currentUserEmailAddress` variable to the current environment",
													"const currentUserEmailAddress = pm.variables.replaceIn(\"{{$randomEmail}}\");",
													"pm.environment.set(\"currentUserEmailAddress\", currentUserEmailAddress);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{currentUserEmailAddress}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "userUpdateEmailAddress.updateEmailAddress",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return user record with updated email address\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData[\"entries\"][0][\"data\"][\"emailAddress\"] !== pm.environment.get(\"currentUserEmailAddress\")).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{$randomEmail}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/:id/email",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":id",
												"email"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentUserId}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform users should be able to update the email address on their account"
						},
						{
							"name": "adminUserEmailExists",
							"item": [
								{
									"name": "getUserAccessToken.getToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should be able to get a userId and access credential when a new User instance is created\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(Object.keys(responseData).includes(\"accessToken\")).to.eql(true);",
													"    pm.expect(Object.keys(responseData).includes(\"userId\")).to.eql(true);",
													"    pm.expect(typeof(responseData.userId) === \"string\").to.eql(true);",
													"    pm.expect(typeof(responseData.accessToken) === \"string\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminUserEmailExists.createUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token in the environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should set currentuserId in the environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `currentUserEmailAddress` variable to the current environment",
													"const currentUserEmailAddress = pm.variables.replaceIn(\"{{$randomEmail}}\");",
													"pm.environment.set(\"currentUserEmailAddress\", currentUserEmailAddress);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{currentUserEmailAddress}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"password\": \"{{$randomPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminUserEmailExists.verifyEmail",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/users/email_exists/:emailAddress",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"email_exists",
												":emailAddress"
											],
											"variable": [
												{
													"key": "emailAddress",
													"value": "{{currentUserEmailAddress}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform should be able to determine if a specified email address already exists in the datastore"
						},
						{
							"name": "adminResetUserPassword",
							"item": [
								{
									"name": "adminResetUserPassword.createUser",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token in the environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should set currentuserId in the environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserId\", responseData.userId);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `currentUserEmailAddress` variable to the current environment",
													"const currentUserEmailAddress = pm.variables.replaceIn(\"{{$randomEmail}}\");",
													"pm.environment.set(\"currentUserEmailAddress\", currentUserEmailAddress);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{currentUserEmailAddress}}\",\n    \"firstName\": \"{{$randomFirstName}}\",\n    \"lastName\": \"{{$randomLastName}}\",\n    \"phoneNumber\": \"{{$randomPhoneNumber}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminResetUserPassword.getToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should be able to get a userId and access credential when a new User instance is created\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(Object.keys(responseData).includes(\"accessToken\")).to.eql(true);",
													"    pm.expect(Object.keys(responseData).includes(\"userId\")).to.eql(true);",
													"    pm.expect(typeof(responseData.userId) === \"string\").to.eql(true);",
													"    pm.expect(typeof(responseData.accessToken) === \"string\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{currentUserEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								},
								{
									"name": "adminResetUserPassword.reset",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"//Add a `currentTemporaryPassword` variable to the current environment",
													"const currentTemporaryPassword = pm.variables.replaceIn(\"{{$randomPassword}}\");",
													"pm.environment.set(\"currentTemporaryPassword\", currentTemporaryPassword);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentUserAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"password\": \"{{currentTemporaryPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/:id/password",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												":id",
												"password"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentUserId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "adminResetUserPassword.getFreshToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set access token\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentUserAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should be able to get a userId and access credential when a new User instance is created\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(Object.keys(responseData).includes(\"accessToken\")).to.eql(true);",
													"    pm.expect(Object.keys(responseData).includes(\"userId\")).to.eql(true);",
													"    pm.expect(typeof(responseData.userId) === \"string\").to.eql(true);",
													"    pm.expect(typeof(responseData.accessToken) === \"string\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{currentUserEmailAddress}}\",\n    \"password\": \"{{currentTemporaryPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								}
							],
							"description": "Platform should be able to reset a specified user password"
						}
					]
				}
			]
		},
		{
			"name": "status-service",
			"item": [
				{
					"name": "getSystemStatus",
					"item": [
						{
							"name": "getSystemStatus.getStatus",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/status",
									"host": [
										"{{url}}"
									],
									"path": [
										"status"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "simluation-service",
			"item": [
				{
					"name": "shipment-simulation",
					"item": [
						{
							"name": "getUserAccessToken",
							"item": [
								{
									"name": "getUserAccessToken.getAdminAccessToken",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Should set admin access token in environment\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
													"});",
													"",
													"pm.test(\"Should be able to get a userId and access credential when a new User instance is created\", function () {",
													"    const responseData = pm.response.json();",
													"    pm.expect(Object.keys(responseData).includes(\"accessToken\")).to.eql(true);",
													"    pm.expect(Object.keys(responseData).includes(\"userId\")).to.eql(true);",
													"    pm.expect(typeof(responseData.userId) === \"string\").to.eql(true);",
													"    pm.expect(typeof(responseData.accessToken) === \"string\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/users/token",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"users",
												"token"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "createSimulation",
							"item": [
								{
									"name": "createSimulation.create",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Set simulation id in the environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentSimulationId\", jsonData.entries[0].id);",
													"    pm.expect(jsonData.entries[0].status === \"notStarted\").to.eql(true);",
													"    pm.expect(jsonData.entries[0].instanceCount === jsonData.entries[0].instances.length).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"instanceCount\": 6,\n    \"intervalMillis\": 15000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/simulations",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulations"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "getSimulationById",
							"item": [
								{
									"name": "getSimulationById.createSimulation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Set simulation id in the environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentSimulationId\", jsonData.entries[0].id);",
													"    pm.expect(jsonData.entries[0].status === \"notStarted\").to.eql(true);",
													"    pm.expect(jsonData.entries[0].instanceCount === jsonData.entries[0].instances.length).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"instanceCount\": 6,\n    \"intervalMillis\": 15000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/simulations",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulations"
											]
										}
									},
									"response": []
								},
								{
									"name": "getSimulationById.getSimulation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return a specified simulation\", function () {",
													"    const jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData.entries[0].id === pm.environment.get(\"currentSimulationId\")).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/simulations/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentSimulationId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "startSimulation",
							"item": [
								{
									"name": "startSimulation.createSimulation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Set simulation id in the environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentSimulationId\", jsonData.entries[0].id);",
													"    pm.expect(jsonData.entries[0].status === \"notStarted\").to.eql(true);",
													"    pm.expect(jsonData.entries[0].instanceCount === jsonData.entries[0].instances.length).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"instanceCount\": 6,\n    \"intervalMillis\": 15000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/simulations",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulations"
											]
										}
									},
									"response": []
								},
								{
									"name": "startSimulation.start",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/v1/simulations/:id/start",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"v1",
												"simulations",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentSimulationId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "startSimulation.getSimulationById",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return a specified simulation\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.entries[0].id === pm.environment.get(\"currentSimulationId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0].status === \"running\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/simulations/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentSimulationId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "endSimulation",
							"item": [
								{
									"name": "endSimulation.createSimulation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 201\", function () {",
													"    pm.response.to.have.status(201);",
													"});",
													"",
													"pm.test(\"Set simulation id in the environment\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.environment.set(\"currentSimulationId\", jsonData.entries[0].id);",
													"    pm.expect(jsonData.entries[0].status === \"notStarted\").to.eql(true);",
													"    pm.expect(jsonData.entries[0].instanceCount === jsonData.entries[0].instances.length).to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"instanceCount\": 6,\n    \"intervalMillis\": 15000\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/v1/simulations",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulations"
											]
										}
									},
									"response": []
								},
								{
									"name": "endSimulation.startSimulation",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/v1/simulations/:id/start",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"v1",
												"simulations",
												":id",
												"start"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentSimulationId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "startSimulation.getSimulationById[1]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return a specified simulation\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.entries[0].id === pm.environment.get(\"currentSimulationId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0].status === \"running\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/simulations/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentSimulationId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "endSimulation.end",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "localhost:3000/api/v1/simulations/:id/end",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"api",
												"v1",
												"simulations",
												":id",
												"end"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentSimulationId}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "startSimulation.getSimulationById[2]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Should return a specified simulation\", function () {",
													"    const jsonData = pm.response.json();",
													"    pm.expect(jsonData.entries[0].id === pm.environment.get(\"currentSimulationId\")).to.eql(true);",
													"    pm.expect(jsonData.entries[0].status === \"ended\").to.eql(true);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{currentAdminAccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{url}}/api/v1/simulations/:id",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"v1",
												"simulations",
												":id"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{currentSimulationId}}"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "simluation-non-admin-auth",
					"item": [
						{
							"name": "nonAdmin.createSimulation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"instanceCount\": 6,\n    \"intervalMillis\": 15000\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "localhost:3000/api/v1/simulations",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"simulations"
									]
								}
							},
							"response": []
						},
						{
							"name": "nonAdmin.getSimulationById",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/v1/simulations/:id",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"simulations",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{currentSimulationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "nonAdmin.startSimulation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/v1/simulations/:id/start",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"simulations",
										":id",
										"start"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{currentSimulationId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "nonAdmin.endSimulation",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {",
											"    pm.response.to.have.status(401);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "localhost:3000/api/v1/simulations/:id/end",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"simulations",
										":id",
										"end"
									],
									"variable": [
										{
											"key": "id",
											"value": "{{currentSimulationId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "storage-service",
			"item": [
				{
					"name": "getUserAccessToken",
					"item": [
						{
							"name": "getUserAccessToken.getAdminAccessToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Should set admin access token in environment\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.environment.set(\"currentAdminAccessToken\", responseData.accessToken);",
											"});",
											"",
											"pm.test(\"Should be able to get a userId and access credential when a new User instance is created\", function () {",
											"    const responseData = pm.response.json();",
											"    pm.expect(Object.keys(responseData).includes(\"accessToken\")).to.eql(true);",
											"    pm.expect(Object.keys(responseData).includes(\"userId\")).to.eql(true);",
											"    pm.expect(typeof(responseData.userId) === \"string\").to.eql(true);",
											"    pm.expect(typeof(responseData.accessToken) === \"string\").to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"emailAddress\": \"{{furyEmailAddress}}\",\n    \"password\": \"{{globalUserPassword}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/users/token",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"users",
										"token"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "getStorageBuckets",
					"item": [
						{
							"name": "adminCreateCrate.createCrate",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Should set currentCrateId in environment\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.environment.set(\"currentCrateId\", jsonData[\"entries\"][0][\"id\"]);",
											"",
											"});",
											"",
											"pm.test(\"Should return an array of crates of length 1\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
											"    pm.expect(jsonData.entries.length === 1).to.eql(true);",
											"     pm.expect(jsonData.entries[0][\"data\"][\"size\"][0] === \"L\").to.eql(true);",
											"    pm.expect(jsonData.count === 1).to.eql(true);",
											"    pm.expect(jsonData.error === null).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{currentAdminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"size\": [\"L\"],\n    \"merchantId\": \"{{$randomUUID}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/v1/crates",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"v1",
										"crates"
									]
								}
							},
							"response": []
						},
						{
							"name": "getStorageBuckets.get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should return a list of storage buckets\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
											"    pm.expect(Object.keys(jsonData).includes(\"count\")).to.eql(true);",
											"    pm.expect(jsonData.entries.length === jsonData.count).to.eql(true);",
											"    pm.expect(jsonData.error === null).to.eql(true);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{currentAdminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/storage/buckets",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"buckets"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "getStorageBucketById",
					"item": [
						{
							"name": "getStorageBucketById.get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Should return a list of storage bucket items\", function () {",
											"    const jsonData = pm.response.json();",
											"    pm.expect(Array.isArray(jsonData.entries)).to.eql(true);",
											"    pm.expect(Object.keys(jsonData).includes(\"count\")).to.eql(true);",
											"    pm.expect(jsonData.entries.length === jsonData.count).to.eql(true);",
											"    pm.expect(jsonData.error === null).to.eql(true);",
											"});",
											"",
											"pm.test(\"Should set the currentBucketItemId environment variable\", function () {",
											"    const jsonData = pm.response.json();",
											"    const [bucketId] = jsonData.entries;",
											"    pm.environment.set(\"currentBucketItemId\", bucketId);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{currentAdminAccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/storage/buckets/:id",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"buckets",
										":id"
									],
									"variable": [
										{
											"key": "id",
											"value": "crate-qr-codes"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "getStorageBucketItemById",
					"item": [
						{
							"name": "getStorageBucketItemById.get",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{url}}/storage/buckets/:id/:bucketItemId",
									"host": [
										"{{url}}"
									],
									"path": [
										"storage",
										"buckets",
										":id",
										":bucketItemId"
									],
									"variable": [
										{
											"key": "id",
											"value": "crate-qr-codes"
										},
										{
											"key": "bucketItemId",
											"value": "{{currentBucketItemId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}